#pragma once
// <Auto-Generated>
// This is here so CodeMaid doesn't reorganize this document
// </Auto-Generated>

#include <cuda.h>
#include "cuda_helpers.cuh"
#include <device_launch_parameters.h>
#include <iostream>
#include <fstream>
#include <time.h>
#include <vector>
#include <memory>
#include <limits>
#include <random>
#include "vec3.cuh"
#include "ray.cuh"
#include "sphere.cuh"
#include "hitable.cuh"
#include "hitable_list.cuh"
#include "camera.cuh"
#include "material.cuh"
#include "random_helpers.cuh"

namespace cuda_renderer {
#define RM(row,col,w) row*w+col
#define CM(row,col,h) col*h+row

#define RM3(row,col,w) 3*row*w+3*col
#define CM3(row,col,h) 3*col*h+3*row

	void write_ppm_image(std::vector<rgb> colors, int w, int h, std::string filename) {
		std::ofstream myfile;
		myfile.open(filename + ".ppm");
		myfile << "P3\n" << w << " " << h << "\n255\n";
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				auto color = colors[RM(i, j, w)];
				myfile << color.r()*255.99 << " " << color.g()*255.99 << " " << color.b()*255.99 << std::endl;
			}
		}
		myfile.close();
	}

	__device__ vec3 color(const ray& r) {
		vec3 unit_direction = unit_vector(r.direction());
		float t = 0.5f*(unit_direction.y() + 1.0f);
		return vec3(1.0, 1.0, 1.0)*(1.0f - t) + vec3(0.5, 0.7, 1.0)*t;
	}

	__global__ void render(vec3 *fb, int max_x, int max_y, vec3 lower_left_corner, vec3 horizontal, vec3 vertical, vec3 origin) {
		int row = threadIdx.x + blockIdx.x * blockDim.x;
		int col = threadIdx.y + blockIdx.y * blockDim.y;
		if ((col >= max_x) || (row >= max_y)) return;
		int pixel_index = RM(row,col, max_x);
		float u = float(row) / float(max_x);
		float v = float(col) / float(max_y);
		ray r(origin, lower_left_corner + horizontal*u + vertical*v);
		fb[pixel_index] = color(r);
	}

	std::vector<rgb> cuda_ray_render(int w, int h, int samples) {
		auto c = camera();

		size_t fb_size = w * h * sizeof(vec3);
		vec3 *fb;
		checkCudaErrors(cudaMallocManaged((void **)&fb, fb_size));
		clock_t start, stop;
		start = clock();

		int tx = 8, ty = 8;
		dim3 blocks(h / ty + 1, w / tx + 1);
		dim3 threads(tx, ty);

		render<<<blocks, threads>>>(fb, w, h, c._lower_left_corner, c._horizontal, c._vertical, c._origin);
		checkCudaErrors(cudaGetLastError());
		checkCudaErrors(cudaDeviceSynchronize()); 


		stop = clock();
		double timer_seconds = ((double)(stop - start)) / CLOCKS_PER_SEC;
		std::cerr << "took " << timer_seconds << " seconds.\n";
		auto colors = std::vector<rgb>(w*h);

		//auto world = std::make_shared<hitable_list>();
		//world->add_hitable(std::make_shared<sphere>(vec3(0, 0, -1), 0.5f, std::make_shared<lambertian>(vec3(0.8f, 0.3f, 0.3f))));
		//world->add_hitable(std::make_shared<sphere>(vec3(0, -100.5, -1), 100.0f, std::make_shared<lambertian>(vec3(0.8f, 0.8f, 0.0f))));
		//world->add_hitable(std::make_shared<sphere>(vec3(1, 0, -1), 0.5f, std::make_shared<metal>(vec3(0.8f, 0.6f, 0.2f), 0.3f)));
		//world->add_hitable(std::make_shared<sphere>(vec3(-1, 0, -1), 0.5f, std::make_shared<dielectric>(1.5f)));
		//world->add_hitable(std::make_shared<sphere>(vec3(-1, 0, -1), -0.45f, std::make_shared<dielectric>(1.5f)));

		// Output FB as Image
		std::cout << "P3\n" << h << " " << w << "\n255\n";
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				const size_t pixel_index = RM(i, j, w);
				colors[pixel_index] = fb[pixel_index];
			}
		}
		checkCudaErrors(cudaFree(fb));
		return colors;
	}
}